/*****************************************************************
 * Source file : bielfloader.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 10/07/2008 18:11
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <idl4glue.h>
#include <l4io.h>
#include "bielfloader-server.h"


// Data structure to store associations
#define ASSOC_TABLE_SIZE 64

typedef struct {
    L4_ThreadId_t thread;
    L4_Word_t     module;
} association_t;

association_t associationTable[ASSOC_TABLE_SIZE];
int associationFreePos = 0;


void appendToAssociationTable(const association_t association){
    if(associationFreePos < ASSOC_TABLE_SIZE - 1)
        associationTable[associationFreePos++] = association;
    else { 
        panic("[RAM-DSM-BIEFLOADER] Association table is full!\n");
    }
    
}

L4_Word_t getModuleId(L4_ThreadId_t thread){
    for(int i = 0; i < associationFreePos; i++)
        if(associationTable[i].thread == thread)
            return associationTable[i].module;
    return -1;
}


/* Interface bielfloader */

IDL4_INLINE void bielfloader_pagefault_implementation(CORBA_Object _caller, const L4_Word_t address, const L4_Word_t ip, const L4_Word_t privileges, idl4_fpage_t *page, idl4_server_environment *_env)

{
  /* implementation of IF_PAGEFAULT::pagefault */
  printf("[RAM-DSM-BIELFLOADER] Received pagefault from 0x%x at 0x%x\n", _caller.raw, address);  

  
  return;
}

IDL4_PUBLISH_BIELFLOADER_PAGEFAULT(bielfloader_pagefault_implementation);

IDL4_INLINE void bielfloader_associateImage_implementation(CORBA_Object _caller, const L4_ThreadId_t *thread, const L4_Word_t bootModuleId, L4_Word_t *initialIp, idl4_server_environment *_env)

{
  /* implementation of IF_BIELFLOADER::associateImage */

  // Insert association in association table  
  association_t association;
  association.thread = *thread;
  association.module = bootModuleId;

  appendToAssociationTable(association);
    

  return;
}

IDL4_PUBLISH_BIELFLOADER_ASSOCIATEIMAGE(bielfloader_associateImage_implementation);

void *bielfloader_vtable_5[BIELFLOADER_DEFAULT_VTABLE_SIZE] = BIELFLOADER_DEFAULT_VTABLE_5;
void *bielfloader_vtable_discard[BIELFLOADER_DEFAULT_VTABLE_SIZE] = BIELFLOADER_DEFAULT_VTABLE_DISCARD;
void **bielfloader_itable[8] = { bielfloader_vtable_discard, bielfloader_vtable_discard, bielfloader_vtable_discard, bielfloader_vtable_discard, bielfloader_vtable_discard, bielfloader_vtable_5, bielfloader_vtable_discard, bielfloader_vtable_discard };
void *bielfloader_ktable[BIELFLOADER_DEFAULT_KTABLE_SIZE] = BIELFLOADER_DEFAULT_KTABLE;

void bielfloader_server(void)

{
  L4_ThreadId_t partner;
  L4_MsgTag_t msgtag;
  idl4_msgbuf_t msgbuf;
  long cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < BIELFLOADER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          if (IDL4_EXPECT_FALSE(idl4_is_kernel_message(msgtag)))
            idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, bielfloader_ktable[idl4_get_kernel_message_id(msgtag) & BIELFLOADER_KID_MASK]);
            else idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, bielfloader_itable[idl4_get_interface_id(&msgtag) & BIELFLOADER_IID_MASK][idl4_get_function_id(&msgtag) & BIELFLOADER_FID_MASK]);
        }
    }
}

void bielfloader_discard(void)

{
}

