/*****************************************************************
 * Source file : pager.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 10/07/2008 17:12
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <idl4glue.h>
#include <l4io.h>
#include "pager-server.h"


/* Interface pager */

IDL4_INLINE void pager_pagefault_implementation(CORBA_Object _caller, const L4_Word_t address, const L4_Word_t ip, const L4_Word_t privileges, idl4_fpage_t *page, idl4_server_environment *_env)

{
  /* implementation of IF_PAGEFAULT::pagefault */

  // 1. Get empty page
  // 2. Map empty page into transport area of ELF-Loader
  // 3. Delegate Pagefault to ELF-Loader
  // 4. Unmap filled page from ELF-Loader
  // 5. Map page to thread, which has raised the pagefault
  printf("[RAM-DSM-PAGER] Received pagefault from 0x%x at 0x%x\n", _caller.raw, address);  

  return;
}

IDL4_PUBLISH_PAGER_PAGEFAULT(pager_pagefault_implementation);

void *pager_vtable_discard[PAGER_DEFAULT_VTABLE_SIZE] = PAGER_DEFAULT_VTABLE_DISCARD;
void **pager_itable[8] = { pager_vtable_discard, pager_vtable_discard, pager_vtable_discard, pager_vtable_discard, pager_vtable_discard, pager_vtable_discard, pager_vtable_discard, pager_vtable_discard };
void *pager_ktable[PAGER_DEFAULT_KTABLE_SIZE] = PAGER_DEFAULT_KTABLE;

void pager_server(void)

{
  L4_ThreadId_t partner;
  L4_MsgTag_t msgtag;
  idl4_msgbuf_t msgbuf;
  long cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < PAGER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, pager_ktable[idl4_get_kernel_message_id(msgtag) & PAGER_KID_MASK]);
        }
    }
}

void pager_discard(void)

{
}

