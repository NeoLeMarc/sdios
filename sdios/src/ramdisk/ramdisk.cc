/*****************************************************************
 * Source file : ramdisk.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 12/09/2008 18:26
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <idl4glue.h>
#include <l4io.h>
#include "ramdisk-server.h"
#include "ramdisk.h"

// Filesystem information 
#define FILESYSTEM_MODULE_ID 8

L4_BootRec_t * filesystemModule; // Grub module storing the filesystem
int            blocksize = 4096; // Size of filesystem blocks

// Locate module with filesystem
void locateFilesystemModule(){
    printf("[RAMDISK] Trying to find boot module\n");

    // get filesystem bootloader module 
    L4_BootInfo_t * bootinfo = (L4_BootInfo_t *)L4_BootInfo(L4_KernelInterface());

    printf("[RAMDISK] Got boot info, trying to locate Module ID\n");
        
    if (L4_BootInfo_Entries (bootinfo) < FILESYSTEM_MODULE_ID)
        panic ("[RAMDISK] Some modules are missing\n");

    printf("[RAMDISK] trying to locate first boot info entry\n");

    filesystemModule  = L4_BootInfo_FirstEntry (bootinfo);

    printf("[RAMDISK] iterating through boot info\n");

    for (unsigned int i = 0; i < FILESYSTEM_MODULE_ID; i++){
        filesystemModule = L4_Next (filesystemModule);
    }

    printf("[RAMDISK] found filesystem module at 0x%08lx\n", filesystemModule);

}

/* Interface ramdisk */

IDL4_INLINE CORBA_long ramdisk_getBlockCount_implementation(CORBA_Object _caller, idl4_server_environment *_env)

{
  CORBA_long __retval = 0;

  /* implementation of IF_BLOCK::getBlockCount */
  
  return __retval;
}

IDL4_PUBLISH_RAMDISK_GETBLOCKCOUNT(ramdisk_getBlockCount_implementation);

IDL4_INLINE CORBA_long ramdisk_getBlockSize_implementation(CORBA_Object _caller, idl4_server_environment *_env)

{
  CORBA_long __retval = blocksize;

  /* implementation of IF_BLOCK::getBlockSize */
  
  return __retval;
}

IDL4_PUBLISH_RAMDISK_GETBLOCKSIZE(ramdisk_getBlockSize_implementation);

IDL4_INLINE void ramdisk_readBlock_implementation(CORBA_Object _caller, const L4_Word_t blockNr, buffer_t *buffer, idl4_server_environment *_env)

{
  /* implementation of IF_BLOCK::readBlock */

  locateFilesystemModule();
  printf("[RAMDISK] read block (%i) called!\n", blockNr);  
  
  // Copy block to buffer  
  memcpy(buffer, filesystemModule + (blocksize * blockNr), blocksize);

  printf("[RAMDISK] read block finished!\n");

  return;
}

IDL4_PUBLISH_RAMDISK_READBLOCK(ramdisk_readBlock_implementation);

IDL4_INLINE void ramdisk_writeBlock_implementation(CORBA_Object _caller, const L4_Word_t blockNr, const buffer_t *buffer, idl4_server_environment *_env)

{
  /* implementation of IF_BLOCK::writeBlock */
  locateFilesystemModule();
 
  // Copy buffer to block
  memcpy(filesystemModule + (blocksize * blockNr), buffer, blocksize);

  return;
}

IDL4_PUBLISH_RAMDISK_WRITEBLOCK(ramdisk_writeBlock_implementation);

void *ramdisk_vtable_9[RAMDISK_DEFAULT_VTABLE_SIZE] = RAMDISK_DEFAULT_VTABLE_9;
void *ramdisk_vtable_discard[RAMDISK_DEFAULT_VTABLE_SIZE] = RAMDISK_DEFAULT_VTABLE_DISCARD;
void **ramdisk_itable[16] = { ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_9, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard, ramdisk_vtable_discard };

void ramdisk_server()

{

  L4_ThreadId_t partner;
  L4_MsgTag_t msgtag;
  idl4_msgbuf_t msgbuf;
  long cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < RAMDISK_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, ramdisk_itable[idl4_get_interface_id(&msgtag) & RAMDISK_IID_MASK][idl4_get_function_id(&msgtag) & RAMDISK_FID_MASK]);
        }
    }
}

void ramdisk_discard(void)

{
}

