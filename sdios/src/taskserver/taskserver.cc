/*****************************************************************
 * Source file : taskserver.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 30/07/2008 18:14
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include "taskserver-server.h"

/* Interface taskserver */

IDL4_INLINE L4_ThreadId_t taskserver_startTask_implementation(CORBA_Object _caller, const CORBA_char *path, const CORBA_char *args, const CORBA_char *env, idl4_server_environment *_env)

{
  L4_ThreadId_t __retval = { raw: 0 };

  /* implementation of IF_TASK::startTask */
  
  return __retval;
}

IDL4_PUBLISH_TASKSERVER_STARTTASK(taskserver_startTask_implementation);

IDL4_INLINE void taskserver_kill_implementation(CORBA_Object _caller, const L4_ThreadId_t *thread, idl4_server_environment *_env)

{
  /* implementation of IF_TASK::kill */
  
  return;
}

IDL4_PUBLISH_TASKSERVER_KILL(taskserver_kill_implementation);

IDL4_INLINE L4_Word_t taskserver_waitTid_implementation(CORBA_Object _caller, const L4_ThreadId_t *thread, idl4_server_environment *_env)

{
  L4_Word_t __retval = 0;

  /* implementation of IF_TASK::waitTid */
  
  return __retval;
}

IDL4_PUBLISH_TASKSERVER_WAITTID(taskserver_waitTid_implementation);

IDL4_INLINE L4_ThreadId_t taskserver_createThread_implementation(CORBA_Object _caller, idl4_server_environment *_env)

{
  L4_ThreadId_t __retval = { raw: 0 };

  /* implementation of IF_TASK::createThread */
  
  return __retval;
}

IDL4_PUBLISH_TASKSERVER_CREATETHREAD(taskserver_createThread_implementation);

IDL4_INLINE L4_Word_t taskserver_getThreadStatus_implementation(CORBA_Object _caller, const L4_ThreadId_t *thread, idl4_server_environment *_env)

{
  L4_Word_t __retval = 0;

  /* implementation of IF_TASK::getThreadStatus */
  
  return __retval;
}

IDL4_PUBLISH_TASKSERVER_GETTHREADSTATUS(taskserver_getThreadStatus_implementation);

void *taskserver_vtable_6[TASKSERVER_DEFAULT_VTABLE_SIZE] = TASKSERVER_DEFAULT_VTABLE_6;
void *taskserver_vtable_discard[TASKSERVER_DEFAULT_VTABLE_SIZE] = TASKSERVER_DEFAULT_VTABLE_DISCARD;
void **taskserver_itable[8] = { taskserver_vtable_discard, taskserver_vtable_discard, taskserver_vtable_discard, taskserver_vtable_discard, taskserver_vtable_discard, taskserver_vtable_discard, taskserver_vtable_6, taskserver_vtable_discard };

void taskserver_server(void)

{
  L4_ThreadId_t partner;
  L4_MsgTag_t msgtag;
  idl4_msgbuf_t msgbuf;
  long cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < TASKSERVER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, taskserver_itable[idl4_get_interface_id(&msgtag) & TASKSERVER_IID_MASK][idl4_get_function_id(&msgtag) & TASKSERVER_FID_MASK]);
        }
    }
}

void taskserver_discard(void)

{
}

